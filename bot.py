import os
import json
import asyncio
import logging
from decimal import Decimal, ROUND_HALF_UP

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, PhotoSize
)
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
BOT_TOKEN = "8217371794:AAHxN4QU5C6tj-8ynSwGnPUF7h-aC-HRWdg"

# ‚úÖ –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤
ALLOWED_ADMIN_IDS = {906779125, 6074106582}

ADMIN_CHANNEL_ID = -1002632514549        # –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
SUPPORT_USERNAME = "MeuzenFC"            # <- –≤–∞—à –ª–æ–≥–∏–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏

# --- URL –∫–∞–Ω–∞–ª–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ ---
REVIEWS_URL = os.getenv("REVIEWS_URL", "https://t.me/+hP-T1TuoybA4YjA6")

# --- –¶–ï–ù–´ ---
CURRENCY = "‚ÇΩ"
PRICE_PER_ACCOUNT = Decimal("150.00")     # —Ü–µ–Ω–∞ –∑–∞ 1 –∞–∫–∫–∞—É–Ω—Ç

# --- –†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –ù–ê –ö–ê–†–¢–£ ---
CARD_NUMBER = "2200 7010 2345 6789"
CARD_HOLDER = "–ö–æ—Å—Ç—ã—à–∏–Ω –°.–≠"
CARD_NOTE   = "–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ –±–æ—Ç–∞!"   # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É (–º–æ–∂–Ω–æ "")

# -------------------- –ò–ù–ò–¶ --------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

STOCK_FILE = "stock.json"
if not os.path.exists(STOCK_FILE):
    with open(STOCK_FILE, "w", encoding="utf-8") as f:
        json.dump([], f, ensure_ascii=False, indent=2)

def load_stock():
    with open(STOCK_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_stock(stock):
    with open(STOCK_FILE, "w", encoding="utf-8") as f:
        json.dump(stock, f, ensure_ascii=False, indent=2)

def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="buy")
    kb.button(text="‚≠ê –û—Ç–∑—ã–≤—ã", url=REVIEWS_URL)                              # ‚Üê —Å—Ä–∞–∑—É –≤ –∫–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤
    kb.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME}")    # ‚Üê —Å—Ä–∞–∑—É –∫ @MeuzenFC
    kb.button(text="üìò –ü—Ä–∞–≤–∏–ª–∞ / FAQ", callback_data="faq")                   # ‚Üê –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞/FAQ
    kb.adjust(1)
    return kb.as_markup()

# -------------------- –•–ï–õ–ü–ï–†–´ --------------------
def parse_account_line(line: str):
    # —Å—Ç—Ä–æ–≥–æ: login:password:+phone
    if not line:
        return None
    parts = [p.strip() for p in line.split(":")]
    if len(parts) != 3:
        return None
    login, password, phone = parts
    if not (login and password and phone and phone.startswith("+")):
        return None
    return {"login": login, "password": password, "phone": phone}

def format_account_message(acc_line: str) -> str:
    p = parse_account_line(acc_line)
    if not p:
        return f"<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram</b>\n<code>{acc_line}</code>\n\n–ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –≤–æ–π—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ: @{SUPPORT_USERNAME}"
    return (
        "<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram</b>\n"
        f"<b>–õ–æ–≥–∏–Ω:</b> <code>{p['login']}</code>\n"
        f"<b>–ü–∞—Ä–æ–ª—å:</b> <code>{p['password']}</code>\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{p['phone']}</code>"
    )

def format_accounts_block(lines: list[str]) -> str:
    return "\n".join(f"{i}. <code>{line}</code>" for i, line in enumerate(lines, 1))

def money(x: Decimal) -> str:
    x = x.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
    s = f"{x:.2f}"
    if s.endswith(".00"):
        s = s[:-3]
    return f"{s} {CURRENCY}"

async def is_admin_user(user_id: int) -> bool:
    """—Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ ALLOWED_ADMIN_IDS –∏–ª–∏ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞"""
    if user_id in ALLOWED_ADMIN_IDS:
        return True
    try:
        cm = await bot.get_chat_member(ADMIN_CHANNEL_ID, user_id)
        return cm.status in ("administrator", "creator")
    except Exception:
        return False

# --- –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–∏ ---
WAIT_CONTACT = set()               # –∂–¥—ë–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Å–ª–µ "–ö—É–ø–∏—Ç—å"
USER_LAST_CONTACT: dict[int, str] = {}
AWAIT_PROOF: set[int] = set()      # –∂–¥—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
PAYMENT_PROOF: dict[int, str] = {} # file_id —Ñ–æ—Ç–æ-—á–µ–∫–∞
USER_QTY: dict[int, int] = {}      # –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ (1..100)

# -------------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ --------------------
def qty_kb(uid: int) -> InlineKeyboardMarkup:
    q = USER_QTY.get(uid, 1)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚àí", callback_data="qty:dec"),
            InlineKeyboardButton(text=f"{q}", callback_data="qty:no"),
            InlineKeyboardButton(text="+", callback_data="qty:inc"),
        ],
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="qty:next")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pay:back")]
    ])

def paid_confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="paid:confirm")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–Ω–æ–≤–æ", callback_data="pay:back")]
    ])

def admin_decision_kb(uid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{uid}")],
        [InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data=f"reject:{uid}")]
    ])

# -------------------- –•–ï–ù–î–õ–ï–†–´ --------------------
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.message(Command("whoami"))
async def whoami(message: Message):
    await message.answer(f"–í–∞—à ID: <code>{message.from_user.id}</code>")

@dp.message(Command("support"))
async def support_cmd(message: Message):
    await message.answer(f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @{SUPPORT_USERNAME}")

@dp.message(Command("faq"))
async def faq_cmd(message: Message):
    await message.answer(get_faq_text(), reply_markup=main_menu())

@dp.callback_query(F.data == "faq")
async def faq_cb(cb: CallbackQuery):
    await cb.message.answer(get_faq_text(), reply_markup=main_menu())
    await cb.answer()

@dp.callback_query(F.data == "buy")
async def buy(cb: CallbackQuery):
    WAIT_CONTACT.add(cb.from_user.id)
    await cb.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–≤—è–∑–∏.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª.\n"
        "–û—Ç–º–µ–Ω–∏—Ç—å: /cancel"
    )
    await cb.answer()

@dp.message(Command("cancel"))
async def cancel(message: Message):
    WAIT_CONTACT.discard(message.from_user.id)
    AWAIT_PROOF.discard(message.from_user.id)
    PAYMENT_PROOF.pop(message.from_user.id, None)
    USER_QTY.pop(message.from_user.id, None)
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())

@dp.callback_query(F.data == "pay:back")
async def pay_back(cb: CallbackQuery):
    WAIT_CONTACT.add(cb.from_user.id)
    AWAIT_PROOF.discard(cb.from_user.id)
    PAYMENT_PROOF.pop(cb.from_user.id, None)
    USER_QTY.pop(cb.from_user.id, None)
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à @username –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–≤—è–∑–∏.\n–û—Ç–º–µ–Ω–∏—Ç—å: /cancel")
    await cb.answer()

@dp.message()
async def collect_contact_or_proof(message: Message):
    uid = message.from_user.id

    # 1) –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ)
    if uid in AWAIT_PROOF and message.photo:
        best: PhotoSize = max(message.photo, key=lambda p: p.width * p.height)
        PAYMENT_PROOF[uid] = best.file_id
        await message.reply("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª.", reply_markup=paid_confirm_kb())
        return

    # 2) –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç ‚Üí –∑–∞—Ç–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if uid in WAIT_CONTACT:
        WAIT_CONTACT.discard(uid)
        contact = (message.text or "").strip()
        if not contact:
            await message.answer("–ü—É—Å—Ç–æ. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫—É.")
            WAIT_CONTACT.add(uid)
            return

        USER_LAST_CONTACT[uid] = contact
        USER_QTY[uid] = 1  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
        q = USER_QTY[uid]
        price = PRICE_PER_ACCOUNT
        total = (price * q)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (1‚Äì100):\n"
            f"–¶–µ–Ω–∞ –∑–∞ 1: <b>{money(price)}</b>\n"
            f"–ò—Ç–æ–≥–æ –∑–∞ {q}: <b>{money(total)}</b>",
            reply_markup=qty_kb(uid)
        )
        return

    # –ò–Ω–æ–µ ‚Äî –∏–≥–Ω–æ—Ä
    return

# -------- –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ --------
@dp.callback_query(F.data.in_(["qty:inc", "qty:dec", "qty:next", "qty:no"]))
async def qty_handlers(cb: CallbackQuery):
    uid = cb.from_user.id
    q = USER_QTY.get(uid, 1)

    updated = False
    if cb.data == "qty:inc":
        q = min(100, q + 1); updated = True
    elif cb.data == "qty:dec":
        q = max(1, q - 1);   updated = True

    if updated:
        USER_QTY[uid] = q
        price = PRICE_PER_ACCOUNT
        total = price * q
        try:
            await cb.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (1‚Äì100):\n"
                f"–¶–µ–Ω–∞ –∑–∞ 1: <b>{money(price)}</b>\n"
                f"–ò—Ç–æ–≥–æ –∑–∞ {q}: <b>{money(total)}\b>",
                reply_markup=qty_kb(uid)
            )
        except TelegramBadRequest:
            await cb.message.edit_reply_markup(reply_markup=qty_kb(uid))
        await cb.answer()
        return

    if cb.data == "qty:no":
        await cb.answer(); return

    if cb.data == "qty:next":
        AWAIT_PROOF.add(uid)
        PAYMENT_PROOF.pop(uid, None)
        q = USER_QTY.get(uid, 1)
        price = PRICE_PER_ACCOUNT
        total = price * q
        text = (
            "ü™ô <b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É</b>\n"
            f"<b>–ù–æ–º–µ—Ä:</b> <code>{CARD_NUMBER}</code>\n"
            f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {CARD_HOLDER}\n"
            + (f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É:</b> <code>{CARD_NOTE}</code>\n" if CARD_NOTE else "") +
            f"\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {q} —à—Ç.\n"
            f"<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {money(total)}\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        await cb.message.answer(text, reply_markup=paid_confirm_kb())
        await cb.answer(); return

# -------- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω—É --------
@dp.callback_query(F.data == "paid:confirm")
async def paid_confirm(cb: CallbackQuery):
    uid = cb.from_user.id
    contact = USER_LAST_CONTACT.get(uid, "(–Ω–µ —É–∫–∞–∑–∞–Ω)")
    proof_id = PAYMENT_PROOF.get(uid)
    q = USER_QTY.get(uid, 1)
    price = PRICE_PER_ACCOUNT
    total = price * q

    if uid in AWAIT_PROOF and not proof_id:
        await cb.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", show_alert=True)
        return

    caption = (
        "üÜï <b>–ó–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ</b>\n"
        f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> tg://user?id={uid}\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {q} —à—Ç.\n"
        f"<b>–¶–µ–Ω–∞ –∑–∞ 1:</b> {money(price)}\n"
        f"<b>–ò—Ç–æ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ:</b> {money(total)}\n"
        "<b>–°—Ç–∞—Ç—É—Å:</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª"
    )

    # 1) –ö–∞–Ω–∞–ª
    try:
        await bot.send_photo(
            ADMIN_CHANNEL_ID,
            photo=proof_id,
            caption=caption,
            reply_markup=admin_decision_kb(uid)
        )
        logging.info("Paid card sent to channel")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        logging.warning("Channel send failed (paid card): %s", e)
    except Exception as e:
        logging.exception("Channel error (paid card): %s", e)

    # 2) –õ–° –∞–¥–º–∏–Ω–∞–º
    for admin_id in ALLOWED_ADMIN_IDS:
        try:
            await bot.send_photo(
                admin_id,
                photo=proof_id,
                caption=caption + "\n\n(–∫–æ–ø–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞)",
                reply_markup=admin_decision_kb(uid)
            )
            logging.info("Paid card sent to admin DM %s", admin_id)
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            logging.warning("DM send failed (paid card) to %s: %s", admin_id, e)
        except Exception as e:
            logging.exception("DM error (paid card) to %s: %s", admin_id, e)

    AWAIT_PROOF.discard(uid)
    await cb.message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –∑–∞–∫–∞–∑.")
    await cb.answer()

# -------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ --------
@dp.callback_query(F.data.startswith("approve:"))
async def approve(cb: CallbackQuery):
    if not (await is_admin_user(cb.from_user.id)):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return

    user_id = int(cb.data.split(":")[1])
    qty = USER_QTY.get(user_id, 1)

    stock = load_stock()
    if len(stock) < qty:
        await cb.message.answer(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: –µ—Å—Ç—å {len(stock)}, –Ω—É–∂–Ω–æ {qty}. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ stock.json.")
        await cb.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç", show_alert=True)
        return

    to_send = stock[:qty]
    rest = stock[qty:]
    save_stock(rest)

    total = PRICE_PER_ACCOUNT * qty
    header = "<b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram</b>\n" if qty == 1 else f"<b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã Telegram ({qty} —à—Ç.)</b>\n"
    body = format_accounts_block(to_send)
    footer = f"\n\n<b>–û–ø–ª–∞—á–µ–Ω–æ:</b> {money(total)}"
    msg = header + body + footer

    try:
        await bot.send_message(user_id, msg)
        await cb.message.answer(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –í—ã–¥–∞–Ω–æ {qty} —à—Ç.")
        await cb.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except TelegramForbiddenError:
        await cb.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É).")
        await cb.answer("–û—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        logging.exception("Delivery error: %s", e)
        await cb.message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        await cb.answer("–û—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("reject:"))
async def reject(cb: CallbackQuery):
    if not (await is_admin_user(cb.from_user.id)):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    user_id = int(cb.data.split(":")[1])
    try:
        await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except Exception:
        pass
    await cb.message.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await cb.answer("–û–∫")

# -------------------- –¢–ï–ö–°–¢ –ü–†–ê–í–ò–õ / FAQ --------------------
def get_faq_text() -> str:
    return (
        "üìò <b>–ü—Ä–∞–≤–∏–ª–∞ / FAQ</b>\n\n"
        "1) <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å?</b>\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç¬ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –¥–ª—è —Å–≤—è–∑–∏.\n"
        "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (1‚Äì100), –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å—É–º–º—É.\n"
        "   ‚Ä¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)¬ª.\n\n"
        "2) <b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?</b>\n"
        f"   ‚Ä¢ –¶–µ–Ω–∞ –∑–∞ 1 –∞–∫–∫–∞—É–Ω—Ç: <b>{money(PRICE_PER_ACCOUNT)}</b>.\n"
        "   ‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.\n\n"
        "3) <b>–ö–∞–∫ –≤—ã–¥–∞—ë—Ç—Å—è —Ç–æ–≤–∞—Ä?</b>\n"
        "   ‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –õ–° –±–æ—Ç–∞.\n"
        "   ‚Ä¢ –§–æ—Ä–º–∞—Ç: <code>–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å:+—Ç–µ–ª–µ—Ñ–æ–Ω</code>.\n\n"
        "4) <b>–°—Ä–æ–∫–∏</b>\n"
        "   ‚Ä¢ –û–±—ã—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5‚Äì15 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n"
        "5) <b>–ì–∞—Ä–∞–Ω—Ç–∏–∏</b>\n"
        "   ‚Ä¢ –ù–∞ –º–æ–º–µ–Ω—Ç –≤—ã–¥–∞—á–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        "6) <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        f"   ‚Ä¢ @{SUPPORT_USERNAME}\n\n"
        "7) <b>–í–∞–∂–Ω–æ</b>\n"
        "   ‚Ä¢ –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π —Å–≤–µ—Ä—è–π—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω).\n"
        "   ‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

# -------------------- –ó–ê–ü–£–°–ö –ù–ê RENDER (polling + health server) --------------------
import os as _os, asyncio as _asyncio
from aiohttp import web

PORT = int(_os.getenv("PORT", "10000"))  # Render –∑–∞–¥–∞—ë—Ç PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å polling
_polling_task: _asyncio.Task | None = None

async def _run_polling():
    print("Polling started‚Ä¶")
    await dp.start_polling(bot)

async def on_app_start(app: web.Application):
    global _polling_task
    _polling_task = _asyncio.create_task(_run_polling())

async def on_app_stop(app: web.Application):
    if _polling_task:
        _polling_task.cancel()
        try:
            await _polling_task
        except _asyncio.CancelledError:
            pass
    await bot.session.close()

async def health(request):
    return web.Response(text="ok")

async def main():
    # –º–∞–ª–µ–Ω—å–∫–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –ø–æ—Ä—Ç
    app = web.Application()
    app.router.add_get("/", health)
    app.router.add_get("/healthz", health)

    app.on_startup.append(on_app_start)
    app.on_shutdown.append(on_app_stop)

    print(f"Running tiny HTTP server on 0.0.0.0:{PORT} and polling Telegram‚Ä¶")
    await web._run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    _asyncio.run(main())
